// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	http "net/http"

	updatemanifest "github.com/aws/amazon-ssm-agent/agent/updateutil/updatemanifest"
	mock "github.com/stretchr/testify/mock"

	updates3util "github.com/aws/amazon-ssm-agent/agent/updateutil/updates3util"
)

// T is an autogenerated mock type for the T type
type T struct {
	mock.Mock
}

// DownloadManifest provides a mock function with given fields: manifest, manifestUrl
func (_m *T) DownloadManifest(manifest updatemanifest.T, manifestUrl string) *updates3util.UpdateErrorStruct {
	ret := _m.Called(manifest, manifestUrl)

	var r0 *updates3util.UpdateErrorStruct
	if rf, ok := ret.Get(0).(func(updatemanifest.T, string) *updates3util.UpdateErrorStruct); ok {
		r0 = rf(manifest, manifestUrl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*updates3util.UpdateErrorStruct)
		}
	}

	return r0
}

// DownloadUpdater provides a mock function with given fields: manifest, updaterPackageName, downloadPath
func (_m *T) DownloadUpdater(manifest updatemanifest.T, updaterPackageName string, downloadPath string) (string, error) {
	ret := _m.Called(manifest, updaterPackageName, downloadPath)

	var r0 string
	if rf, ok := ret.Get(0).(func(updatemanifest.T, string, string) string); ok {
		r0 = rf(manifest, updaterPackageName, downloadPath)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(updatemanifest.T, string, string) error); ok {
		r1 = rf(manifest, updaterPackageName, downloadPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStableVersion provides a mock function with given fields: stableVersionUrl, client
func (_m *T) GetStableVersion(stableVersionUrl string, client *http.Client) (string, error) {
	ret := _m.Called(stableVersionUrl, client)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, *http.Client) string); ok {
		r0 = rf(stableVersionUrl, client)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *http.Client) error); ok {
		r1 = rf(stableVersionUrl, client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
